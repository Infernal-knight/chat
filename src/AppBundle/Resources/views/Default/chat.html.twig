{{ sonata_block_render({ 'type': 'app.block.user_login' }) }}
{% if not isLoggedIn %}
    <a href="{{ path('hwi_oauth_service_redirect', {'service': 'vkontakte' }) }}" alt="Sign in with VK">Sign in with VK</a>
{% else %}
    <div id="users"></div>
    <div id="chat">
        {% for message in messages %}
            {{ message | raw }}
        {% endfor %}
    </div>
    <div><span id="private" style="display: none;">To: <span id="privateTo" data-uid=""></span> <span id="privateCancel">X</span> </span><input type="text" id="input"> <button id="submit">&rarr;</button></div>

    {{ clank_client() }}
    <script type="text/javascript">

        var chat = Clank.connect("ws://{{ host }}:8080");

        chat.on('socket/connect', function(session){

            session.subscribe('chat', function(uri, payload){
                //console.log('Received:', payload);

                switch (payload.action) {
                    case 'messagePrivate':
                    case 'messageNew':
                        $('#chat').append(payload.params.message);
                        break;

                    case 'userList':
                        $('#users').html(payload.params.userList);
                        break;

                    case 'userAdd':
                        $('#users').append(payload.params.user);
                        break;

                    case 'userRemove':
                        $($("[data-uid='" + payload.params.userId + "']")[0]).remove();
                        break;

                    default:
                        break;
                }
            });

            session.publish('chat', {action: 'userList'});

            var sendFunction = function () {
                $input = $('#input');
                $privateTo = $('#privateTo');
                if ($input.val()) {
                    if ($privateTo.data('uid')) {
                        session.publish('chat', {action: 'messagePrivate', params: { message: $input.val(), receiver: $privateTo.data('uid') } });
                        $privateTo.text('');
                        $privateTo.data('uid', '');
                        $('#private').hide();
                    } else {
                        session.publish('chat', {action: 'messageNew', params: { message: $input.val() } });
                    }
                    $input.val('');
                }
            }

            $('#submit').click(sendFunction);
            $('#input').keypress(function(event) {
                if (event.which == 13) {
                    event.preventDefault();
                    sendFunction();
                }
            });

            $('#users').on('click', '.uid', function () {
                $this = $(this);
                $('#private').show();
                $privateTo = $('#privateTo');
                $privateTo.text($this.text());
                $privateTo.data('uid', $this.data('uid'));
            });

            $('#privateCancel').click(function () {
                $privateTo = $('#privateTo');
                $privateTo.text('');
                $privateTo.data('uid', '');
                $('#private').hide();
            });
        });

        chat.on("socket/disconnect", function(error){
            //console.log("Disconnected for " + error.reason + " with code " + error.code);
        });

    </script>
{% endif %}