imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

framework:
    #esi:             ~
    translator:      { fallback: "%locale%" }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    bundles:        [ ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        types:
            json: Sonata\Doctrine\Types\JsonType
    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }


sonata_block:
    default_contexts: [cms, sonata_page_bundle]
    context_manager: sonata.page.block.context_manager
    blocks:
        sonata.admin.block.admin_list:
            contexts:   [admin]
        sonata.admin.block.search_result:
            contexts:   [admin]
        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)

        sonata.admin_doctrine_orm.block.audit:
            contexts:   [admin]

        sonata.block.service.text:
        sonata.block.service.rss:

        # Some specific block from the SonataMediaBundle
        sonata.media.block.media:
        sonata.media.block.gallery:
        sonata.media.block.feature_media:

        # Builtin Block
        sonata.block.service.text:
        sonata.block.service.container:
        sonata.block.service.rss:
        sonata.block.service.menu:
        sonata.block.service.template:

        # PageBundle's Blocks
        sonata.page.block.container:
            # cache: sonata.cache.memcached
            # cache: sonata.cache.predis
            # cache: sonata.page.cache.esi # if you are using the PageBundle
            # cache: sonata.block.cache.esi # if you are using the BlockBundle without the PageBundle
        sonata.page.block.children_pages:
        sonata.page.block.breadcrumb:


        # UserBundle's Blocks
        sonata.user.block.account:
            cache: sonata.page.cache.js_async
            #cache: sonata.page.cache.esi
            contexts: [user]
        sonata.user.block.menu:
            contexts: [user]

        # SeoBundle's Blocks
        sonata.seo.block.email.share_button:
        sonata.seo.block.facebook.like_box:
        sonata.seo.block.facebook.like_button:
        sonata.seo.block.facebook.send_button:
        sonata.seo.block.facebook.share_button:
        sonata.seo.block.pinterest.pin_button:
        sonata.seo.block.twitter.share_button:
        sonata.seo.block.twitter.follow_button:
        sonata.seo.block.twitter.hashtag_button:
        sonata.seo.block.twitter.mention_button:
        sonata.seo.block.twitter.embed:

        # Formatter
        # sonata.formatter.block.formatter:

        sonata.seo.block.breadcrumb.homepage:


sonata_user:
    security_acl: true
    manager_type: orm # can be orm or mongodb


fos_user:
    db_driver:      orm # can be orm or odm
    firewall_name:  main
    user_class:     Application\Sonata\UserBundle\Entity\User


    group:
        group_class:   Application\Sonata\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager                    # If you're using doctrine orm (use sonata.user.mongodb.user_manager for mongodb)

    service:
        user_manager: sonata.user.orm.user_manager                      # If you're using doctrine orm (use sonata.user.mongodb.group_manager for mongodb)

sonata_seo:
    default:          sonata.seo.page.default
    encoding:         UTF-8
    page:
        title:            Sonata Project
        metas:
            name:
                keywords:             foo bar
                description:          The description
                robots:               index, follow

            property:
                # Facebook application settings
                #'fb:app_id':          XXXXXX
                #'fb:admins':          admin1, admin2

                # Open Graph information
                # see http://developers.facebook.com/docs/opengraphprotocol/#types or http://ogp.me/
                'og:site_name':       Sonata Project Sandbox
                'og:description':     A demo of the some rich bundles for your Symfony2 projects

            http-equiv:
                'Content-Type':         text/html; charset=utf-8
                #'X-Ua-Compatible':      IE=EmulateIE7

            charset:
                UTF-8:    ''

        head:
            'xmlns':              http://www.w3.org/1999/xhtml
            'xmlns:og':           http://opengraphprotocol.org/schema/
            #'xmlns:fb':           "http://www.facebook.com/2008/fbml"

sonata_cache:
    caches:
        esi:
            token: an unique security key # a random one is generated by default
            servers:
                - varnishadm -T 127.0.0.1:2000 {{ COMMAND }} "{{ EXPRESSION }}"

        ssi:
            token: an unique security key # a random one is generated by default

        #mongo:
        #    database:   cache
        #    collection: cache
        #    servers:
        #        - {host: 127.0.0.1, port: 27017, user: username, password: pASS'}
        #        - {host: 127.0.0.2}

        #memcached:
        #    prefix: test     # prefix to ensure there is no clash between instances
        #    servers:
        #        - {host: 127.0.0.1, port: 11211, weight: 0}

        #predis:
        #    servers:
        #        - {host: 127.0.0.1, port: 6379, database: 42}

        #apc:
        #    token:  s3cur3   # token used to clear the related cache
        #    prefix: test     # prefix to ensure there is no clash between instances
        #    servers:
        #        - { domain: kooqit.local, ip: 127.0.0.1, port: 80}

        symfony:
            token: s3cur3 # token used to clear the related cache
            #php_cache_enabled: true # Optional (default: false), clear APC or PHP OPcache
            #types: [mytype1, mycustomtype2] # Optional, you can restrict allowed cache types
            servers:
                - { domain: kooqit.local, ip: 127.0.0.1, port: 80}

cmf_routing:
    chain:
        routers_by_id:
            # enable the DynamicRouter with high priority to allow overwriting configured routes with content
            #symfony_cmf_routing_extra.dynamic_router: 200
            # enable the symfony default router with a lower priority
            sonata.page.router: 150
            router.default: 100

sonata_page:
    multisite: host
    use_streamed_response: true # set the value to false in debug mode or if the reverse proxy does not handle streamed response
    ignore_route_patterns:
        - ^(.*)admin(.*)   # ignore admin route, ie route containing 'admin'
        - ^_(.*)          # ignore symfony routes

    ignore_routes:
        - sonata_page_esi_cache
        - sonata_page_ssi_cache
        - sonata_page_js_sync_cache
        - sonata_page_js_async_cache
        - sonata_cache_esi
        - sonata_cache_ssi
        - sonata_cache_js_async
        - sonata_cache_js_sync
        - sonata_cache_apc

    ignore_uri_patterns:
        - ^/admin\/   # ignore admin route, ie route containing 'admin'

    page_defaults:
        homepage: {decorate: false} # disable decoration for homepage, key - is a page route

    #default_template: default # template key from templates section, used as default for pages
    #templates:
    #    default: {path: 'SonataPageBundle::layout.html.twig', name: default }

    # manage the http errors
    catch_exceptions:
        not_found: [404]    # render 404 page with "not_found" key (name generated: _page_internal_error_{key})
        fatal:     [500]    # so you can use the same page for different http errors or specify specific page for each error

    default_template: default
    templates:
        default:
            path: 'SonataPageBundle::layout.html.twig'
            name: 'default'
            containers:
                 header:
                     name: Header
                 content_top:
                     name: Top content
                 content:
                     name: Main content
                 content_bottom:
                     name: Bottom content
                 footer:
                     name: Footer
            matrix:
                 layout: |
                     HHHHHHHH
                     TTTTTTTT
                     CCCCCCCC
                     BBBBBBBB
                     FFFFFFFF

                 mapping:
                     H: header
                     T: content_top
                     C: content
                     B: content_bottom
                     F: footer

        2columns:
            path: 'SonataPageBundle::2columns_layout.html.twig'
            name: '2 columns layout'
            containers:
                 header:
                     name: Header
                 content_top:
                     name: Top content
                 left_col:
                     name: Left content
                 right_col:
                     name: Right content
                 content_bottom:
                     name: Bottom content
                 footer:
                     name: Footer
            matrix:
                 layout: |
                     HHHHHHHH
                     TTTTTTTT
                     LLLLRRRR
                     BBBBBBBB
                     FFFFFFFF

                 mapping:
                     H: header
                     T: content_top
                     L: left_col
                     R: right_col
                     B: content_bottom
                     F: footer

sonata_media:
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    default_context: default
    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr
    contexts:
        default:  # the default context is mandatory
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file

            formats:
                small: { width: 100 , quality: 70}
                big:   { width: 500 , quality: 70}

    cdn:
        server:
            path: /uploads/media # http://media.sonata-project.org/

    filesystem:
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     false
            
